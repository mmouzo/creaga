---
interface Props {
  animation?: 'fadeIn' | 'slideUp' | 'slideLeft' | 'slideRight' | 'scale';
  delay?: number;
  duration?: number;
  className?: string;
}

const { 
  animation = 'fadeIn', 
  delay = 0, 
  duration = 0.6,
  className = '' 
} = Astro.props;
---

<div 
  class={`animated-section ${className}`}
  data-animation={animation}
  data-delay={delay}
  data-duration={duration}
>
  <slot />
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const animatedSections = document.querySelectorAll('.animated-section');
    
    // Check if GSAP is available
    if (typeof window !== 'undefined' && (window as any).gsap) {
      const gsap = (window as any).gsap;
      
      animatedSections.forEach(element => {
        const animation = element.getAttribute('data-animation') || 'fadeIn';
        const delay = parseFloat(element.getAttribute('data-delay') || '0');
        const duration = parseFloat(element.getAttribute('data-duration') || '0.6');
        
        // Set initial state
        const initialState: any = { opacity: 0 };
        const finalState: any = { opacity: 1, duration, delay };

        switch (animation) {
          case 'slideUp':
            initialState.y = 50;
            finalState.y = 0;
            break;
          case 'slideLeft':
            initialState.x = 50;
            finalState.x = 0;
            break;
          case 'slideRight':
            initialState.x = -50;
            finalState.x = 0;
            break;
          case 'scale':
            initialState.scale = 0.8;
            finalState.scale = 1;
            break;
        }

        gsap.set(element, initialState);

        // Create intersection observer for scroll-triggered animations
        const observer = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                gsap.to(element, finalState);
                observer.unobserve(element);
              }
            });
          },
          { threshold: 0.1, rootMargin: '0px 0px -50px 0px' }
        );

        observer.observe(element);
      });
    } else {
      // Fallback CSS animation if GSAP is not available
      animatedSections.forEach(element => {
        const htmlElement = element as HTMLElement;
        htmlElement.style.opacity = '1';
        htmlElement.style.transform = 'translateY(0)';
        
        // Add CSS animation class based on animation type
        const animation = element.getAttribute('data-animation') || 'fadeIn';
        htmlElement.classList.add(`animate-${animation}`);
      });
    }
  });
</script>

<style>
  .animated-section {
    opacity: 0;
  }
  
  /* Fallback CSS animations */
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  
  @keyframes slideUp {
    from { 
      opacity: 0; 
      transform: translateY(50px); 
    }
    to { 
      opacity: 1; 
      transform: translateY(0); 
    }
  }
  
  @keyframes slideLeft {
    from { 
      opacity: 0; 
      transform: translateX(50px); 
    }
    to { 
      opacity: 1; 
      transform: translateX(0); 
    }
  }
  
  @keyframes slideRight {
    from { 
      opacity: 0; 
      transform: translateX(-50px); 
    }
    to { 
      opacity: 1; 
      transform: translateX(0); 
    }
  }
  
  @keyframes scale {
    from { 
      opacity: 0; 
      transform: scale(0.8); 
    }
    to { 
      opacity: 1; 
      transform: scale(1); 
    }
  }
  
  .animate-fadeIn {
    animation: fadeIn 0.6s ease-out forwards;
  }
  
  .animate-slideUp {
    animation: slideUp 0.6s ease-out forwards;
  }
  
  .animate-slideLeft {
    animation: slideLeft 0.6s ease-out forwards;
  }
  
  .animate-slideRight {
    animation: slideRight 0.6s ease-out forwards;
  }
  
  .animate-scale {
    animation: scale 0.6s ease-out forwards;
  }
</style>
