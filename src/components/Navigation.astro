---
import Logo from './Logo.astro';

const navItems = [
  { href: '#vision', label: 'Visión' },
  { href: '#entorno', label: 'Entorno' },
  { href: '#programa', label: 'Programa' },
  { href: '#diseno', label: 'Diseño' },
  { href: '/galeria', label: 'Galería' },
  { href: '#analisis', label: 'Análisis' },
  { href: '#pliego', label: 'Pliego' }
];
---

<header class="bg-white/95 backdrop-blur-md sticky top-0 z-50 shadow-sm border-b border-criaga-gray-light transition-all duration-300" id="main-header">
  <nav class="container mx-auto px-6 py-4">
    <div class="flex justify-between items-center">
      <Logo size="md" />
      
      <!-- Desktop Navigation -->
      <div class="hidden lg:flex space-x-8">
        {navItems.map(item => (
          <a 
            href={item.href} 
            class="nav-link text-criaga-gray hover:text-criaga-red transition-all duration-300 font-medium border-b-2 border-transparent hover:border-criaga-red pb-1 relative group"
          >
            {item.label}
            <span class="absolute inset-x-0 -bottom-1 h-0.5 bg-criaga-red transform scale-x-0 group-hover:scale-x-100 transition-transform duration-300"></span>
          </a>
        ))}
      </div>
      
      <!-- Search Button -->
      <button 
        id="search-toggle" 
        class="hidden md:flex items-center space-x-2 px-4 py-2 bg-criaga-gray-light rounded-lg hover:bg-gray-300 transition-all duration-200 group"
        aria-label="Buscar en el documento"
      >
        <svg class="w-4 h-4 group-hover:scale-110 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
        <span class="text-sm">Buscar</span>
      </button>
      
      <!-- Mobile Menu Button -->
      <button 
        id="mobile-menu-toggle" 
        class="lg:hidden p-2 rounded-lg hover:bg-criaga-gray-light transition-colors duration-200"
        aria-label="Abrir menú de navegación"
      >
        <svg class="w-6 h-6 transition-transform duration-200" id="menu-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>
    </div>
    
    <!-- Mobile Navigation -->
    <div id="mobile-menu" class="hidden lg:hidden mt-4 pb-4 border-t border-criaga-gray-light">
      <div class="flex flex-col space-y-3 pt-4">
        {navItems.map(item => (
          <a 
            href={item.href} 
            class="nav-link-mobile text-criaga-gray hover:text-criaga-red transition-colors duration-300 font-medium py-2 px-4 rounded-lg hover:bg-criaga-gray-light/50"
          >
            {item.label}
          </a>
        ))}
      </div>
    </div>
  </nav>
</header>

<!-- Search Modal -->
<div id="search-modal" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 hidden">
  <div class="flex items-start justify-center min-h-screen pt-16 px-4">
    <div class="bg-white rounded-lg shadow-xl w-full max-w-2xl animate-slide-up">
      <div class="p-6">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg font-semibold text-criaga-red">Buscar en el documento</h3>
          <button id="search-close" class="text-gray-400 hover:text-gray-600 transition-colors duration-200">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        <input 
          type="text" 
          id="search-input" 
          placeholder="Escriba para buscar..." 
          class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-criaga-red focus:border-transparent outline-none transition-all duration-200"
        >
        <div id="search-results" class="mt-4 max-h-96 overflow-y-auto"></div>
      </div>
    </div>
  </div>
</div>

<script>
  // Navigation functionality with enhanced animations
  document.addEventListener('DOMContentLoaded', function() {
    const header = document.getElementById('main-header');
    const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
    const mobileMenu = document.getElementById('mobile-menu');
    const menuIcon = document.getElementById('menu-icon');
    
    // Header scroll effect
    let lastScrollY = window.scrollY;
    
    window.addEventListener('scroll', () => {
      const currentScrollY = window.scrollY;
      
      if (currentScrollY > 100) {
        header?.classList.add('shadow-lg');
        header?.classList.remove('shadow-sm');
      } else {
        header?.classList.remove('shadow-lg');
        header?.classList.add('shadow-sm');
      }
      
      // Hide/show header on scroll
      if (currentScrollY > lastScrollY && currentScrollY > 200) {
        header?.style.setProperty('transform', 'translateY(-100%)');
      } else {
        header?.style.setProperty('transform', 'translateY(0)');
      }
      
      lastScrollY = currentScrollY;
    });
    
    // Mobile menu toggle with animation
    mobileMenuToggle?.addEventListener('click', () => {
      const isHidden = mobileMenu?.classList.contains('hidden');
      
      if (isHidden) {
        mobileMenu?.classList.remove('hidden');
        menuIcon?.style.setProperty('transform', 'rotate(90deg)');
        // Animate menu items
        const menuItems = mobileMenu?.querySelectorAll('.nav-link-mobile');
        menuItems?.forEach((item, index) => {
          (item as HTMLElement).style.setProperty('animation-delay', `${index * 0.1}s`);
          item.classList.add('animate-slide-up');
        });
      } else {
        mobileMenu?.classList.add('hidden');
        menuIcon?.style.setProperty('transform', 'rotate(0deg)');
      }
    });
    
    // Close mobile menu when clicking on links
    document.querySelectorAll('.nav-link-mobile').forEach(link => {
      link.addEventListener('click', () => {
        mobileMenu?.classList.add('hidden');
        menuIcon?.style.setProperty('transform', 'rotate(0deg)');
      });
    });
    
    // Search modal functionality
    const searchToggle = document.getElementById('search-toggle');
    const searchModal = document.getElementById('search-modal');
    const searchClose = document.getElementById('search-close');
    const searchInput = document.getElementById('search-input');
    
    searchToggle?.addEventListener('click', () => {
      searchModal?.classList.remove('hidden');
      searchInput?.focus();
    });
    
    searchClose?.addEventListener('click', () => {
      searchModal?.classList.add('hidden');
    });
    
    // Close modal when clicking outside
    searchModal?.addEventListener('click', (e) => {
      if (e.target === searchModal) {
        searchModal.classList.add('hidden');
      }
    });
    
    // Enhanced active navigation highlighting for hash links only
    const sections = document.querySelectorAll('section[id]');
    const navLinks = document.querySelectorAll('.nav-link[href^="#"]');
    
    if (sections.length > 0 && navLinks.length > 0) {
      const observerOptions = {
        rootMargin: '-20% 0px -80% 0px',
        threshold: 0
      };
      
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const id = entry.target.getAttribute('id');
            navLinks.forEach(link => {
              link.classList.remove('text-criaga-red', 'border-criaga-red');
              link.classList.add('text-criaga-gray', 'border-transparent');
              
              if (link.getAttribute('href') === `#${id}`) {
                link.classList.remove('text-criaga-gray', 'border-transparent');
                link.classList.add('text-criaga-red', 'border-criaga-red');
              }
            });
          }
        });
      }, observerOptions);
      
      sections.forEach(section => observer.observe(section));
    }
    
    // Enhanced search functionality
    const searchResults = document.getElementById('search-results');
    
    if (searchInput && searchResults) {
      let searchTimeout: NodeJS.Timeout;
      
      searchInput.addEventListener('input', function() {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
          const query = (this as HTMLInputElement).value.toLowerCase().trim();
          
          if (query.length < 2) {
            searchResults.innerHTML = '';
            return;
          }
          
          // Enhanced search implementation
          const sections = document.querySelectorAll('section[id]');
          const results: Array<{title: string, id: string, snippet: string, relevance: number}> = [];
          
          sections.forEach(section => {
            const title = section.querySelector('h2')?.textContent || '';
            const content = section.textContent?.toLowerCase() || '';
            
            if (content.includes(query)) {
              const queryIndex = content.indexOf(query);
              const relevance = title.toLowerCase().includes(query) ? 2 : 1;
              
              results.push({
                title: title,
                id: section.id,
                snippet: content.substring(Math.max(0, queryIndex - 50), queryIndex + 100),
                relevance
              });
            }
          });
          
          // Sort by relevance
          results.sort((a, b) => b.relevance - a.relevance);
          
          if (results.length > 0) {
            searchResults.innerHTML = results.map(result => `
              <div class="p-3 hover:bg-gray-50 rounded-lg cursor-pointer border-b border-gray-100 last:border-b-0 transition-colors duration-200">
                <a href="#${result.id}" class="block">
                  <h4 class="font-semibold text-criaga-red mb-1">${result.title}</h4>
                  <p class="text-sm text-gray-600 line-clamp-2">${result.snippet}...</p>
                </a>
              </div>
            `).join('');
          } else {
            searchResults.innerHTML = '<p class="p-3 text-gray-500 text-center">No se encontraron resultados</p>';
          }
        }, 300);
      });
    }
  });
</script>

<style>
  .nav-link {
    position: relative;
  }
  
  .nav-link::after {
    content: '';
    position: absolute;
    width: 0;
    height: 2px;
    bottom: -2px;
    left: 50%;
    background-color: #8C1D18;
    transition: all 0.3s ease;
    transform: translateX(-50%);
  }
  
  .nav-link:hover::after,
  .nav-link.active::after {
    width: 100%;
  }
  
  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .animate-slide-up {
    animation: slideUp 0.3s ease-out forwards;
  }
  
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>